%% Remeber to first set the simulation parameters in setEKFUsageDemoParams.m, then run this script.
global dt;
global omega;
global total_time;
global max_iter;
global num_sensors;
global k;
global boundary_origin;
global b;
global measure_noise_variance;
global proc_noise_variance;
global initial_target_loc; 
global initial_location_estimation;

close all;
setEKFUsageDemoDefaultParams(); % Assign the simulation parameters with default values.

% Then, manually tweak some of the parameters to meet the need of our
% current experiment.

 % The case when omega being small is a sanity check, that the target barely moves.
% omega=0.1;
total_time;
b=-2;


enable_sensor_movement=true;
[predicts,actual_locs,sensors]=EKF_MovingSensor();
plot_trajectories(predicts,actual_locs,sensors);


% nexttile;
figure;
error=sum((predicts-actual_locs).^2,1);
plot(linspace(0,total_time,length(error)),error);
title("Estimation Error. b="+b+", Moving Sensors:"+enable_sensor_movement);
xlabel("Time:seconds")
ylabel("Error")

function plot_trajectories(predicts,actual_locs,sensors,b,enable_sensor_movement)
    figure;
    scatter(predicts(1,1),predicts(2,1),'d','DisplayName','Initial Predicted Loc');
    hold on;
    plot(predicts(1,:),predicts(2,:),'DisplayName','Predicted Trajectory');
    hold on;
    scatter(predicts(1,end),predicts(2,end),'+','DisplayName','Final Predicted Loc');
    hold on;

    plot(actual_locs(1,:),actual_locs(2,:),'DisplayName','Actual Trajectory');
    hold on;
    plot_sensor_movement(sensors);
    title("Trajectories, b="+b+", Moving Sensors:"+enable_sensor_movement);
end

% You should see after we incorporate ekf.correct(), the initially offed
% estimation can be gradually corrected. You should also see some noisy
% behavior if we tune up the noise magnitude in the beginning of this file.

% enable_sensor_movement=false;
% EKF_MovingSensor;